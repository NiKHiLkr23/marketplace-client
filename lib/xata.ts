// Generated by Xata Codegen 0.28.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Product",
    columns: [
      { name: "title", type: "string", notNull: true, defaultValue: "" },
      { name: "description", type: "string", notNull: true, defaultValue: "" },
      { name: "imageUrl", type: "string" },
      { name: "amount", type: "int" },
      { name: "owner", type: "link", link: { table: "User" } },
    ],
  },
  {
    name: "User",
    columns: [
      { name: "name", type: "string", notNull: true, defaultValue: "" },
      { name: "role", type: "string", notNull: true, defaultValue: "" },
      { name: "address", type: "string" },
      { name: "email", type: "string", notNull: true, defaultValue: "" },
      { name: "imageUrl", type: "string", notNull: true, defaultValue: "" },
    ],
    revLinks: [{ column: "owner", table: "Product" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Product = InferredTypes["Product"];
export type ProductRecord = Product & XataRecord;

export type User = InferredTypes["User"];
export type UserRecord = User & XataRecord;

export type DatabaseSchema = {
  Product: ProductRecord;
  User: UserRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://NIKHIL-KUMAR-s-workspace-jkqnmq.us-east-1.xata.sh/db/sol-marketplace",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
